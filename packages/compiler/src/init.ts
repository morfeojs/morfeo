import input from '@inquirer/input';
import * as fs from 'fs';
import { logger } from './logger';
import path from 'path';
import { packageJson } from './utils';

export async function init() {
  let entryPoints: string;
  let cssPath: string;
  let instancePath: string;

  logger.whitespace();
  logger.announcement('** INITIALIZE MORFEO **');
  logger.whitespace();

  try {
    entryPoints = await input({
      message: 'From which paths do you want to extract the CSS?',
      default: './src/**/*.{ts,tsx,js,jsx}',
    });
    cssPath = await input({
      message: 'Where do you want to place the extracted CSS?',
      default: './src/styles/morfeo.css',
    });
    instancePath = await input({
      message: 'Where do you want to place the morfeo instance?',
      default: './src/morfeo.ts',
    });

    logger.whitespace();
  } catch {
    logger.warning('Aborted by user.');

    return process.exit(0);
  }

  await Promise.all([
    writeConfigFile({
      targetPath: 'morfeo.config.ts',
      entryPoints,
      cssPath,
      instancePath,
    }),
    writeCssFile(cssPath),
    writeInstanceFile(instancePath, isReactCodebase()),
    writeToGitIgnore(['# morfeo', cssPath]),
  ]);
}

async function writeConfigFile(params: {
  targetPath: string;
  entryPoints: string;
  cssPath: string;
  instancePath: string;
}) {
  try {
    await fs.promises.writeFile(
      path.join(process.cwd(), params.targetPath),
      `import type { MorfeoCompilerOptions } from '@morfeo/compiler';
import { morfeo } from '${getPathWithoutFileExtension(params.instancePath)}';

const config: MorfeoCompilerOptions = {
  morfeo,
  entryPoints: ['${params.entryPoints}'],
  output: '${params.cssPath}',
};

export default config;`,
    );

    logger.success(`Configuration file created at ${params.targetPath}`);
  } catch {
    logger.error(
      `Error while creating configuration file at ${params.targetPath}`,
    );
  }
}

async function writeCssFile(targetPath: string) {
  try {
    await fs.promises.writeFile(
      path.join(process.cwd(), targetPath),
      '/* This file will be auto-generated by morfeo */',
    );

    logger.success(`CSS file created at ${targetPath}`);
  } catch {
    logger.error(`Error while creating CSS file at ${targetPath}`);
  }
}

async function writeInstanceFile(targetPath: string, isReactCodebase: boolean) {
  try {
    await fs.promises.writeFile(
      path.join(process.cwd(), targetPath),
      `import { createMorfeo } from '${
        isReactCodebase ? '@morfeo/react' : '@morfeo/web'
      }';
  
export const morfeo = createMorfeo();`,
    );

    logger.success(`Morfeo instance file created at ${targetPath}`);
  } catch {
    logger.error(`Error while creating morfeo instance file at ${targetPath}`);
  }
}

async function writeToGitIgnore(lines: string[]) {
  try {
    const gitIgnorePath = path.join(process.cwd(), '.gitignore');

    const gitIgnoreContent = await fs.promises.readFile(gitIgnorePath, {
      encoding: 'utf-8',
    });

    if (gitIgnoreContent.includes('# morfeo')) {
      logger.warning(`Morfeo CSS file seems already gitignored`);

      return;
    }

    await fs.promises.writeFile(
      gitIgnorePath,
      `${gitIgnoreContent}\n${lines
        .map(line => `${line[0] === '.' ? '' : '.'}${line.slice(1)}`)
        .join('\n')}`,
    );

    logger.success(`Added morfeo CSS file to .gitignore`);
  } catch {
    logger.error(`Error while gitignoring morfeo files`);
  }
}

function isReactCodebase() {
  return (
    'react' in (packageJson.dependencies ?? {}) ||
    'react' in (packageJson.peerDependencies ?? {})
  );
}

function getPathWithoutFileExtension(path: string) {
  return path.replace(/\.[^/.]+$/, '');
}
